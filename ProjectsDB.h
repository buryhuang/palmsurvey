/* FOR BEST FORMATING OF THIS FILE SET TABSTOP TO 2 */

#ifndef __PROJECTS_PRJT_DB_H__
#define __PROJECTS_PRJT_DB_H__

// definitions ------------------------------------------------------------------------------------

#define kCardNo															0
#define kNoRecordIndex											0xFFFF
#define kNoDate															0xFFFF

#define appFileCreator											'NRSY'
#define appFileCreatorAsString							"NRSY"

#define kLastVisitedPrjtIndexFeatureNum			0x0001


// main database ----------------------------------------------------------------------------------

#define kMainDBType													'DATB'
#define kMainDBName 												"Survey-NRSY-DB"
#define kMainDBVersion											0x02

#define kSortMainDBByPriorityStateName 						0
#define kSortMainDBByStatePriorityName 						1
#define kSortMainDBByBeginDateName								2
#define kSortMainDBByName													3
#define kSortMainDBManually												4
#define kSortMainDBByCategoryPriorityStateName		5
#define kSortMainDBByCategoryStatePriorityName		6
#define kSortMainDBByCategoryName									7

#define kProjectsPriorityMask								0x70
#define kProjectsPriority1									0x10
#define kProjectsPriority2									0x20
#define kProjectsPriority3									0x30
#define kProjectsPriority4									0x40
#define kProjectsPriority5									0x50

#define kProjectsStateMask									0x0F
#define kProjectsState1											0x01
#define kProjectsState2											0x02
#define kProjectsState3											0x03
#define kProjectsState4											0x04
#define kProjectsState5											0x05

#define PrjtDBProjectsPriority(priority_status)		((priority_status & kProjectsPriorityMask)>>4)
#define PrjtDBProjectsState(priority_status)			((priority_status) & kProjectsStateMask)

// todo databases ---------------------------------------------------------------------------------

#define kPrjtToDoDBType											'DATA'

#define ProjectsCategoriesAppInfoStr 				100
#define ProjectsToDoCategoriesAppInfoStr 		101

#define kSortToDosByPriorityDueDate					0
#define kSortToDosByDueDatePriority					1
#define kSortToDosManually									2
#define kSortToDosByCategoryPriority				3
#define kSortToDosByCategoryDueDate					4

#define kToDosCompleteFlag									0x80
#define kToDosPriorityMask									0x7F
#define kToDoNoDueDate											0xFFFF

#define kToDoPriority1											0x01
#define kToDoPriority2											0x02
#define kToDoPriority3											0x03
#define kToDoPriority4											0x04
#define kToDoPriority5											0x05


// database structures ----------------------------------------------------------------------------
typedef struct
{
	UInt16	renamedCategories;
	Char		categoryLabels[dmRecNumCategories][dmCategoryLength];
	UInt8		categoryUniqIDs[dmRecNumCategories];
	UInt8		lastUniqID;
	UInt8		reserved1;
	UInt16	reserved2;
}
PrjtMainDBInfoType;

typedef struct 
{
	UInt16			renamedCategories;	// bitfield of categories with a different name
	char 				categoryLabels[dmRecNumCategories][dmCategoryLength];
	UInt8 			categoryUniqIDs[dmRecNumCategories];
	UInt8				lastUniqID;	// Uniq IDs generated by the device are between
													// 0 - 127.  Those from the PC are 128 - 255.
	UInt8				reserved1;	// from the compiler word aligning things
	UInt16			reserved2;
	UInt16			dirtyAppInfo;
	UInt8				sortOrder;
	UInt8				lastCategory;
}
PrjtToDoDBInfoType;

// this is the record struct in our main db
typedef struct
{
	DateType 	begin;
	DateType	end;
	UInt8			priority_status;
	UInt16		numOfFinishedToDos;
	UInt16		numOfAllToDos;
	Char			name;
}
PrjtPackedProjectType;

typedef struct
{
	DateType 	begin;
	DateType	end;
	UInt8			priority;
	UInt8			status;
	UInt16		numOfFinishedToDos;
	UInt16		numOfAllToDos;
	Char		* name;
	Char 		*	note;
}
PrjtUnpackedProjectType;

typedef struct
{
	DateType 	dueDate;
	UInt8			priority;	// high bit is complete flag
	Char			description;	// followed by the note
}
PrjtToDoType;

// main db related functions
extern DmOpenRef 	PrjtDBGetMainDB( Boolean create, UInt16 openMode );	// must be in the first section !!!
extern UInt16			PrjtDBCreateProjectRecord( DmOpenRef db, PrjtUnpackedProjectType * template, UInt16 category, UInt8 sortOrder );
extern Int16 			PrjtDBCompareProjectsRecords( PrjtPackedProjectType *rec1, PrjtPackedProjectType *rec2, Int16 sortOrder, SortRecordInfoPtr rec1sortInfo, SortRecordInfoPtr rec2sortInfo, MemHandle appInfoH );
extern Boolean 		PrjtDBReSortChangedProjectRecord( DmOpenRef mainDB, UInt16 sortOrder, UInt16 * recIndex );
extern void				PrjtDBSetProjectSecretBit( DmOpenRef mainDB, UInt16 index, Boolean set );

// todo db related functions
extern DmOpenRef 	PrjtDBOpenToDoDB( Char * name, UInt16 mode ); // must be in the first section !!!
extern DmOpenRef 	PrjtDBCreateToDoDB( Char * name, Boolean initAppInfo );
extern void 			PrjtDBCountToDos( DmOpenRef todoDB, UInt16 * allToDos, UInt16 * finishedToDos ); // must be in the first section !!!
extern UInt16 		PrjtDBScanForNewToDoDBs( DmOpenRef mainDB, UInt8 sortOrder ); // must be in the first section !!!
extern Err				PrjtDBRenameToDoDB( DmOpenRef db, const Char * newName );
extern Err				PrjtDBRenameProject( DmOpenRef mainDB, UInt16 sortOrder, UInt16 * index, const Char * newName );
extern UInt8			PrjtDBGetToDoSortOrder( DmOpenRef todoDB );
extern UInt16			PrjtDBGetToDoLastCategory( DmOpenRef todoDB );
extern void 			PrjtDBSetToDoLastCategory( DmOpenRef todoDB, UInt16 category );
extern void 			PrjtDBGetToDoDBInformation( DmOpenRef todoDB, UInt16 * lastCategory, UInt8 * sortOrder );
extern Boolean		PrjtDBToDoToggleCompletionFlag( DmOpenRef mainDB, UInt16 prjt_index, DmOpenRef todoDB, UInt16 todo_index, Boolean completeDueDate );
extern Boolean		PrjtDBToDoResortRecord( DmOpenRef todoDB, UInt16 * recIndex, UInt8 sortOrder );
extern Int16			PrjtDBCompareToDoRecords( PrjtToDoType *rec1, PrjtToDoType *rec2, Int16 sortOrder, SortRecordInfoType *sort1, SortRecordInfoType *sort2, MemHandle appInfoH );
extern PrjtToDoDBInfoType * PrjtDBGetToDoLockedInfoPtr( DmOpenRef todoDB );

#endif /* __PROJECTS_PRJT_DB_H__ */
